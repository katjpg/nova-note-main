"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hast-util-raw";
exports.ids = ["vendor-chunks/hast-util-raw"];
exports.modules = {

/***/ "(ssr)/./node_modules/hast-util-raw/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/hast-util-raw/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raw: () => (/* binding */ raw)\n/* harmony export */ });\n/* harmony import */ var _ungap_structured_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ungap/structured-clone */ \"(ssr)/./node_modules/@ungap/structured-clone/esm/index.js\");\n/* harmony import */ var hast_util_from_parse5__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hast-util-from-parse5 */ \"(ssr)/./node_modules/hast-util-from-parse5/lib/index.js\");\n/* harmony import */ var hast_util_to_parse5__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! hast-util-to-parse5 */ \"(ssr)/./node_modules/hast-util-to-parse5/lib/index.js\");\n/* harmony import */ var html_void_elements__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! html-void-elements */ \"(ssr)/./node_modules/html-void-elements/index.js\");\n/* harmony import */ var parse5__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! parse5 */ \"(ssr)/./node_modules/parse5/dist/index.js\");\n/* harmony import */ var unist_util_position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unist-util-position */ \"(ssr)/./node_modules/unist-util-position/lib/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var web_namespaces__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! web-namespaces */ \"(ssr)/./node_modules/web-namespaces/index.js\");\n/* harmony import */ var zwitch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zwitch */ \"(ssr)/./node_modules/zwitch/index.js\");\n/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('hast-util-raw').Options} Options\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap\n * @typedef {import('parse5').ParserOptions<DefaultTreeAdapterMap>} ParserOptions\n * @typedef {import('parse5').Token.CharacterToken} CharacterToken\n * @typedef {import('parse5').Token.CommentToken} CommentToken\n * @typedef {import('parse5').Token.DoctypeToken} DoctypeToken\n * @typedef {import('parse5').Token.Location} Location\n * @typedef {import('parse5').Token.TagToken} TagToken\n *\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Nodes) => undefined} handle\n *   Add a hast node to the parser.\n * @property {Options} options\n *   User configuration.\n * @property {Parser<DefaultTreeAdapterMap>} parser\n *   Current parser.\n * @property {boolean} stitches\n *   Whether there are stitches.\n */\n\n/**\n * @typedef Stitch\n *   Custom comment-like value we pass through parse5, which contains a\n *   replacement node that weâ€™ll swap back in afterwards.\n * @property {'comment'} type\n *   Node type.\n * @property {{stitch: Nodes}} value\n *   Replacement value.\n */\n\n\n\n\n\n\n\n\n\n\n\n// Node types associated with MDX.\n// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>\nconst knownMdxNames = new Set([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n\n/** @type {ParserOptions} */\nconst parseOptions = {sourceCodeLocationInfo: true, scriptingEnabled: false}\n\n/**\n * Pass a hast tree through an HTML parser, which will fix nesting, and turn\n * raw nodes into actual nodes.\n *\n * @param {Nodes} tree\n *   Original hast tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   Parsed again tree.\n */\nfunction raw(tree, options) {\n  const document = documentMode(tree)\n  /** @type {(node: Nodes, state: State) => undefined} */\n  const one = (0,zwitch__WEBPACK_IMPORTED_MODULE_2__.zwitch)('type', {\n    handlers: {root, element, text, comment, doctype, raw: handleRaw},\n    unknown\n  })\n\n  /** @type {State} */\n  const state = {\n    parser: document\n      ? new parse5__WEBPACK_IMPORTED_MODULE_1__.Parser(parseOptions)\n      : parse5__WEBPACK_IMPORTED_MODULE_1__.Parser.getFragmentParser(undefined, parseOptions),\n    handle(node) {\n      one(node, state)\n    },\n    stitches: false,\n    options: options || {}\n  }\n\n  one(tree, state)\n  resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointStart)())\n\n  const p5 = document ? state.parser.document : state.parser.getFragment()\n  const result = (0,hast_util_from_parse5__WEBPACK_IMPORTED_MODULE_4__.fromParse5)(p5, {\n    // To do: support `space`?\n    file: state.options.file\n  })\n\n  if (state.stitches) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_5__.visit)(result, 'comment', function (node, index, parent) {\n      const stitch = /** @type {Stitch} */ (/** @type {unknown} */ (node))\n      if (stitch.value.stitch && parent && index !== undefined) {\n        /** @type {Array<RootContent>} */\n        const siblings = parent.children\n        // @ts-expect-error: assume the stitch is allowed.\n        siblings[index] = stitch.value.stitch\n        return index\n      }\n    })\n  }\n\n  // Unpack if possible and when not given a `root`.\n  if (\n    result.type === 'root' &&\n    result.children.length === 1 &&\n    result.children[0].type === tree.type\n  ) {\n    return result.children[0]\n  }\n\n  return result\n}\n\n/**\n * Transform all nodes\n *\n * @param {Array<RootContent>} nodes\n *   hast content.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction all(nodes, state) {\n  let index = -1\n\n  /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */\n  if (nodes) {\n    while (++index < nodes.length) {\n      state.handle(nodes[index])\n    }\n  }\n}\n\n/**\n * Transform a root.\n *\n * @param {Root} node\n *   hast root node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction root(node, state) {\n  all(node.children, state)\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   hast element node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction element(node, state) {\n  startTag(node, state)\n\n  all(node.children, state)\n\n  endTag(node, state)\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   hast text node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction text(node, state) {\n  // Allow `DATA` through `PLAINTEXT`,\n  // but when hanging in a tag for example,\n  // switch back to `DATA`.\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  if (state.parser.tokenizer.state > 4) {\n    state.parser.tokenizer.state = 0\n  }\n\n  /** @type {CharacterToken} */\n  const token = {\n    type: parse5__WEBPACK_IMPORTED_MODULE_1__.Token.TokenType.CHARACTER,\n    chars: node.value,\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointStart)(node))\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a doctype.\n *\n * @param {Doctype} node\n *   hast doctype node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction doctype(node, state) {\n  /** @type {DoctypeToken} */\n  const token = {\n    type: parse5__WEBPACK_IMPORTED_MODULE_1__.Token.TokenType.DOCTYPE,\n    name: 'html',\n    forceQuirks: false,\n    publicId: '',\n    systemId: '',\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointStart)(node))\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a stitch.\n *\n * @param {Nodes} node\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction stitch(node, state) {\n  // Mark that there are stitches, so we need to walk the tree and revert them.\n  state.stitches = true\n\n  /** @type {Nodes} */\n  const clone = cloneWithoutChildren(node)\n\n  // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the\n  // passed through node).\n  if ('children' in node && 'children' in clone) {\n    // Root in root out.\n    const fakeRoot = /** @type {Root} */ (\n      raw({type: 'root', children: node.children}, state.options)\n    )\n    clone.children = fakeRoot.children\n  }\n\n  // Hack: `value` is supposed to be a string, but as none of the tools\n  // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes\n  // through.\n  comment({type: 'comment', value: {stitch: clone}}, state)\n}\n\n/**\n * Transform a comment (or stitch).\n *\n * @param {Comment | Stitch} node\n *   hast comment node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction comment(node, state) {\n  /** @type {string} */\n  // @ts-expect-error: we pass stitches through.\n  const data = node.value\n\n  /** @type {CommentToken} */\n  const token = {\n    type: parse5__WEBPACK_IMPORTED_MODULE_1__.Token.TokenType.COMMENT,\n    data,\n    location: createParse5Location(node)\n  }\n  resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointStart)(node))\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a raw node.\n *\n * @param {Raw} node\n *   hast raw node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction handleRaw(node, state) {\n  // Reset preprocessor:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.\n  state.parser.tokenizer.preprocessor.html = ''\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.pos = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.lastGapPos = -2\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.gapStack = []\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.skipNextNewLine = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.lastChunkWritten = false\n  state.parser.tokenizer.preprocessor.endOfChunkHit = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.isEol = false\n\n  // Now pass `node.value`.\n  setPoint(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointStart)(node))\n  state.parser.tokenizer.write(node.value, false)\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer._runParsingLoop()\n\n  // Character references hang, so if we ended there, we need to flush\n  // those too.\n  // We reset the preprocessor as if the document ends here.\n  // Then one single call to the relevant state does the trick, parse5\n  // consumes the whole token.\n\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  // Note: a change to `parse5`, which breaks this, was merged but not released.\n  // Investigate when it is.\n  if (\n    state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */ ||\n    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */\n  ) {\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lastChunkWritten = true\n    /** @type {number} */\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    const cp = state.parser.tokenizer._consume()\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer._callState(cp)\n  }\n}\n\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node_\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Never.\n */\nfunction unknown(node_, state) {\n  const node = /** @type {Nodes} */ (node_)\n\n  if (\n    state.options.passThrough &&\n    state.options.passThrough.includes(node.type)\n  ) {\n    stitch(node, state)\n  } else {\n    let extra = ''\n\n    if (knownMdxNames.has(node.type)) {\n      extra =\n        \". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax\"\n    }\n\n    throw new Error('Cannot compile `' + node.type + '` node' + extra)\n  }\n}\n\n/**\n * Reset the tokenizer of a parser.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction resetTokenizer(state, point) {\n  setPoint(state, point)\n\n  // Process final characters if theyâ€™re still there after hibernating.\n  /** @type {CharacterToken} */\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  const token = state.parser.tokenizer.currentCharacterToken\n\n  if (token && token.location) {\n    token.location.endLine = state.parser.tokenizer.preprocessor.line\n    token.location.endCol = state.parser.tokenizer.preprocessor.col + 1\n    token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.currentToken = token\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser._processToken(state.parser.currentToken)\n  }\n\n  // Reset tokenizer:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.\n  // Especially putting it back in the `data` state is useful: some elements,\n  // like textareas and iframes, change the state.\n  // See GH-7.\n  // But also if broken HTML is in `raw`, and then a correct element is given.\n  // See GH-11.\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.paused = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.inLoop = false\n\n  // Note: donâ€™t reset `state`, `inForeignNode`, or `lastStartTagName`, we\n  // manually update those when needed.\n  state.parser.tokenizer.active = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.returnState = parse5__WEBPACK_IMPORTED_MODULE_1__.TokenizerMode.DATA\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.charRefCode = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.consumedAfterSnapshot = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.currentLocation = null\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.currentCharacterToken = null\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.currentToken = null\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.currentAttr = {name: '', value: ''}\n}\n\n/**\n * Set current location.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction setPoint(state, point) {\n  if (point && point.offset !== undefined) {\n    /** @type {Location} */\n    const location = {\n      startLine: point.line,\n      startCol: point.column,\n      startOffset: point.offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    }\n\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1 // Looks weird, but ensures we get correct positional info.\n    state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset\n    state.parser.tokenizer.preprocessor.line = point.line\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.currentLocation = location\n  }\n}\n\n/**\n * Emit a start tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction startTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n\n  // Ignore tags if weâ€™re in plain text.\n  if (state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_1__.TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointStart)(node))\n\n  const current = state.parser.openElements.current\n  let ns = 'namespaceURI' in current ? current.namespaceURI : web_namespaces__WEBPACK_IMPORTED_MODULE_6__.webNamespaces.html\n\n  if (ns === web_namespaces__WEBPACK_IMPORTED_MODULE_6__.webNamespaces.html && tagName === 'svg') {\n    ns = web_namespaces__WEBPACK_IMPORTED_MODULE_6__.webNamespaces.svg\n  }\n\n  const result = (0,hast_util_to_parse5__WEBPACK_IMPORTED_MODULE_7__.toParse5)(\n    // Shallow clone to not delve into `children`: we only need the attributes.\n    {...node, children: []},\n    {space: ns === web_namespaces__WEBPACK_IMPORTED_MODULE_6__.webNamespaces.svg ? 'svg' : 'html'}\n  )\n\n  /** @type {TagToken} */\n  const tag = {\n    type: parse5__WEBPACK_IMPORTED_MODULE_1__.Token.TokenType.START_TAG,\n    tagName,\n    tagID: parse5__WEBPACK_IMPORTED_MODULE_1__.html.getTagID(tagName),\n    // We always send start and end tags.\n    selfClosing: false,\n    ackSelfClosing: false,\n    // Always element.\n    /* c8 ignore next */\n    attrs: 'attrs' in result ? result.attrs : [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We canâ€™t use the tokenizer here, as we donâ€™t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n\n  // â€¦but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Set a tag name, similar to how the tokenizer would do it.\n  state.parser.tokenizer.lastStartTagName = tagName\n\n  // `inForeignNode` is correctly set by the parser.\n}\n\n/**\n * Emit an end tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction endTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n  // Do not emit closing tags for HTML void elements.\n  if (\n    !state.parser.tokenizer.inForeignNode &&\n    html_void_elements__WEBPACK_IMPORTED_MODULE_8__.htmlVoidElements.includes(tagName)\n  ) {\n    return\n  }\n\n  // Ignore tags if weâ€™re in plain text.\n  if (state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_1__.TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointEnd)(node))\n\n  /** @type {TagToken} */\n  const tag = {\n    type: parse5__WEBPACK_IMPORTED_MODULE_1__.Token.TokenType.END_TAG,\n    tagName,\n    tagID: parse5__WEBPACK_IMPORTED_MODULE_1__.html.getTagID(tagName),\n    selfClosing: false,\n    ackSelfClosing: false,\n    attrs: [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We canâ€™t use the tokenizer here, as we donâ€™t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n\n  // â€¦but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Switch back to the data state after alternative states that donâ€™t accept\n  // tags:\n  if (\n    // Current element is closed.\n    tagName === state.parser.tokenizer.lastStartTagName &&\n    // `<textarea>` and `<title>`\n    (state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_1__.TokenizerMode.RCDATA ||\n      // `<iframe>`, `<noembed>`, `<style>`, `<xmp>`\n      state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_1__.TokenizerMode.RAWTEXT ||\n      // `<script>`\n      state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_1__.TokenizerMode.SCRIPT_DATA)\n  ) {\n    state.parser.tokenizer.state = parse5__WEBPACK_IMPORTED_MODULE_1__.TokenizerMode.DATA\n  }\n}\n\n/**\n * Check if `node` represents a whole document or a fragment.\n *\n * @param {Nodes} node\n *   hast node.\n * @returns {boolean}\n *   Whether this represents a whole document or a fragment.\n */\nfunction documentMode(node) {\n  const head = node.type === 'root' ? node.children[0] : node\n  return Boolean(\n    head &&\n      (head.type === 'doctype' ||\n        (head.type === 'element' && head.tagName.toLowerCase() === 'html'))\n  )\n}\n\n/**\n * Get a `parse5` location from a node.\n *\n * @param {Nodes | Stitch} node\n *   hast node.\n * @returns {Location}\n *   `parse5` location.\n */\nfunction createParse5Location(node) {\n  const start = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointStart)(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n  const end = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.pointEnd)(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n\n  /** @type {Record<keyof Location, number | undefined>} */\n  const location = {\n    startLine: start.line,\n    startCol: start.column,\n    startOffset: start.offset,\n    endLine: end.line,\n    endCol: end.column,\n    endOffset: end.offset\n  }\n\n  // @ts-expect-error: unist point values can be `undefined` in hast, which\n  // `parse5` types donâ€™t want.\n  return location\n}\n\n/**\n * @template {Nodes} NodeType\n *   Node type.\n * @param {NodeType} node\n *   Node to clone.\n * @returns {NodeType}\n *   Cloned node, without children.\n */\nfunction cloneWithoutChildren(node) {\n  return 'children' in node\n    ? (0,_ungap_structured_clone__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({...node, children: []})\n    : (0,_ungap_structured_clone__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXJhdy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0EsYUFBYSx3QkFBd0I7QUFDckMsYUFBYSx3QkFBd0I7QUFDckMsYUFBYSx3QkFBd0I7QUFDckMsYUFBYSxzQkFBc0I7QUFDbkMsYUFBYSxxQkFBcUI7QUFDbEMsYUFBYSw0QkFBNEI7QUFDekMsYUFBYSxxQkFBcUI7QUFDbEM7QUFDQSxhQUFhLGlDQUFpQztBQUM5QztBQUNBLGFBQWEsa0NBQWtDO0FBQy9DO0FBQ0EsYUFBYSx3Q0FBd0M7QUFDckQsYUFBYSx1REFBdUQ7QUFDcEUsYUFBYSx1Q0FBdUM7QUFDcEQsYUFBYSxxQ0FBcUM7QUFDbEQsYUFBYSxxQ0FBcUM7QUFDbEQsYUFBYSxpQ0FBaUM7QUFDOUMsYUFBYSxpQ0FBaUM7QUFDOUM7QUFDQSxhQUFhLHVCQUF1QjtBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDRCQUE0QjtBQUMxQztBQUNBLGNBQWMsU0FBUztBQUN2QjtBQUNBLGNBQWMsK0JBQStCO0FBQzdDO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBOztBQUVxRDtBQUNMO0FBQ0o7QUFDTztBQUNNO0FBQ0Q7QUFDbEI7QUFDTTtBQUNmOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxlQUFlO0FBQzFCLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsMENBQTBDO0FBQ3ZELGNBQWMsOENBQU07QUFDcEIsZUFBZSxzREFBc0Q7QUFDckU7QUFDQSxHQUFHOztB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QUFDaEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtEQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw2REFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLDRDQUE0QztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxtRUFBZSxFQUFFLHNCQUFzQjtBQUM3QyxNQUFNLG1FQUFlO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXJhdy9saWIvaW5kZXguanM/MzE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Db21tZW50fSBDb21tZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRG9jdHlwZX0gRG9jdHlwZVxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Ob2Rlc30gTm9kZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUm9vdENvbnRlbnR9IFJvb3RDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gVGV4dFxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QtdXRpbC1yYXcnKS5PcHRpb25zfSBPcHRpb25zXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1oYXN0JykuUmF3fSBSYXdcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdwYXJzZTUnKS5EZWZhdWx0VHJlZUFkYXB0ZXJNYXB9IERlZmF1bHRUcmVlQWRhcHRlck1hcFxuICogQHR5cGVkZWYge2ltcG9ydCgncGFyc2U1JykuUGFyc2VyT3B0aW9uczxEZWZhdWx0VHJlZUFkYXB0ZXJNYXA+fSBQYXJzZXJPcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdwYXJzZTUnKS5Ub2tlbi5DaGFyYWN0ZXJUb2tlbn0gQ2hhcmFjdGVyVG9rZW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3BhcnNlNScpLlRva2VuLkNvbW1lbnRUb2tlbn0gQ29tbWVudFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdwYXJzZTUnKS5Ub2tlbi5Eb2N0eXBlVG9rZW59IERvY3R5cGVUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgncGFyc2U1JykuVG9rZW4uTG9jYXRpb259IExvY2F0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdwYXJzZTUnKS5Ub2tlbi5UYWdUb2tlbn0gVGFnVG9rZW5cbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvaW50fSBQb2ludFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgU3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHByb3BlcnR5IHsobm9kZTogTm9kZXMpID0+IHVuZGVmaW5lZH0gaGFuZGxlXG4gKiAgIEFkZCBhIGhhc3Qgbm9kZSB0byB0aGUgcGFyc2VyLlxuICogQHByb3BlcnR5IHtPcHRpb25zfSBvcHRpb25zXG4gKiAgIFVzZXIgY29uZmlndXJhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7UGFyc2VyPERlZmF1bHRUcmVlQWRhcHRlck1hcD59IHBhcnNlclxuICogICBDdXJyZW50IHBhcnNlci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc3RpdGNoZXNcbiAqICAgV2hldGhlciB0aGVyZSBhcmUgc3RpdGNoZXMuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBTdGl0Y2hcbiAqICAgQ3VzdG9tIGNvbW1lbnQtbGlrZSB2YWx1ZSB3ZSBwYXNzIHRocm91Z2ggcGFyc2U1LCB3aGljaCBjb250YWlucyBhXG4gKiAgIHJlcGxhY2VtZW50IG5vZGUgdGhhdCB3ZeKAmWxsIHN3YXAgYmFjayBpbiBhZnRlcndhcmRzLlxuICogQHByb3BlcnR5IHsnY29tbWVudCd9IHR5cGVcbiAqICAgTm9kZSB0eXBlLlxuICogQHByb3BlcnR5IHt7c3RpdGNoOiBOb2Rlc319IHZhbHVlXG4gKiAgIFJlcGxhY2VtZW50IHZhbHVlLlxuICovXG5cbmltcG9ydCBzdHJ1Y3R1cmVkQ2xvbmUgZnJvbSAnQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUnXG5pbXBvcnQge2Zyb21QYXJzZTV9IGZyb20gJ2hhc3QtdXRpbC1mcm9tLXBhcnNlNSdcbmltcG9ydCB7dG9QYXJzZTV9IGZyb20gJ2hhc3QtdXRpbC10by1wYXJzZTUnXG5pbXBvcnQge2h0bWxWb2lkRWxlbWVudHN9IGZyb20gJ2h0bWwtdm9pZC1lbGVtZW50cydcbmltcG9ydCB7UGFyc2VyLCBUb2tlbiwgVG9rZW5pemVyTW9kZSwgaHRtbH0gZnJvbSAncGFyc2U1J1xuaW1wb3J0IHtwb2ludEVuZCwgcG9pbnRTdGFydH0gZnJvbSAndW5pc3QtdXRpbC1wb3NpdGlvbidcbmltcG9ydCB7dmlzaXR9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnXG5pbXBvcnQge3dlYk5hbWVzcGFjZXN9IGZyb20gJ3dlYi1uYW1lc3BhY2VzJ1xuaW1wb3J0IHt6d2l0Y2h9IGZyb20gJ3p3aXRjaCdcblxuLy8gTm9kZSB0eXBlcyBhc3NvY2lhdGVkIHdpdGggTURYLlxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9tZHgtanMvbWR4L2Jsb2IvOGE1NjMxMi9wYWNrYWdlcy9tZHgvbGliL25vZGUtdHlwZXMuanM+XG5jb25zdCBrbm93bk1keE5hbWVzID0gbmV3IFNldChbXG4gICdtZHhGbG93RXhwcmVzc2lvbicsXG4gICdtZHhKc3hGbG93RWxlbWVudCcsXG4gICdtZHhKc3hUZXh0RWxlbWVudCcsXG4gICdtZHhUZXh0RXhwcmVzc2lvbicsXG4gICdtZHhqc0VzbSdcbl0pXG5cbi8qKiBAdHlwZSB7UGFyc2VyT3B0aW9uc30gKi9cbmNvbnN0IHBhcnNlT3B0aW9ucyA9IHtzb3VyY2VDb2RlTG9jYXRpb25JbmZvOiB0cnVlLCBzY3JpcHRpbmdFbmFibGVkOiBmYWxzZX1cblxuLyoqXG4gKiBQYXNzIGEgaGFzdCB0cmVlIHRocm91Z2ggYW4gSFRNTCBwYXJzZXIsIHdoaWNoIHdpbGwgZml4IG5lc3RpbmcsIGFuZCB0dXJuXG4gKiByYXcgbm9kZXMgaW50byBhY3R1YWwgbm9kZXMuXG4gKlxuICogQHBhcmFtIHtOb2Rlc30gdHJlZVxuICogICBPcmlnaW5hbCBoYXN0IHRyZWUgdG8gdHJhbnNmb3JtLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtOb2Rlc31cbiAqICAgUGFyc2VkIGFnYWluIHRyZWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYXcodHJlZSwgb3B0aW9ucykge1xuICBjb25zdCBkb2N1bWVudCA9IGRvY3VtZW50TW9kZSh0cmVlKVxuICAvKiogQHR5cGUgeyhub2RlOiBOb2Rlcywgc3RhdGU6IFN0YXRlKSA9PiB1bmRlZmluZWR9ICovXG4gIGNvbnN0IG9uZSA9IHp3aXRjaCgndHlwZScsIHtcbiAgICBoYW5kbGVyczoge3Jvb3QsIGVsZW1lbnQsIHRleHQsIGNvbW1lbnQsIGRvY3R5cGUsIHJhdzogaGFuZGxlUmF3fSxcbiAgICB1bmtub3duXG4gIH0pXG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgcGFyc2VyOiBkb2N1bWVudFxuICAgICAgPyBuZXcgUGFyc2VyKHBhcnNlT3B0aW9ucylcbiAgICAgIDogUGFyc2VyLmdldEZyYWdtZW50UGFyc2VyKHVuZGVmaW5lZCwgcGFyc2VPcHRpb25zKSxcbiAgICBoYW5kbGUobm9kZSkge1xuICAgICAgb25lKG5vZGUsIHN0YXRlKVxuICAgIH0sXG4gICAgc3RpdGNoZXM6IGZhbHNlLFxuICAgIG9wdGlvbnM6IG9wdGlvbnMgfHwge31cbiAgfVxuXG4gIG9uZSh0cmVlLCBzdGF0ZSlcbiAgcmVzZXRUb2tlbml6ZXIoc3RhdGUsIHBvaW50U3RhcnQoKSlcblxuICBjb25zdCBwNSA9IGRvY3VtZW50ID8gc3RhdGUucGFyc2VyLmRvY3VtZW50IDogc3RhdGUucGFyc2VyLmdldEZyYWdtZW50KClcbiAgY29uc3QgcmVzdWx0ID0gZnJvbVBhcnNlNShwNSwge1xuICAgIC8vIFRvIGRvOiBzdXBwb3J0IGBzcGFjZWA/XG4gICAgZmlsZTogc3RhdGUub3B0aW9ucy5maWxlXG4gIH0pXG5cbiAgaWYgKHN0YXRlLnN0aXRjaGVzKSB7XG4gICAgdmlzaXQocmVzdWx0LCAnY29tbWVudCcsIGZ1bmN0aW9uIChub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICBjb25zdCBzdGl0Y2ggPSAvKiogQHR5cGUge1N0aXRjaH0gKi8gKC8qKiBAdHlwZSB7dW5rbm93bn0gKi8gKG5vZGUpKVxuICAgICAgaWYgKHN0aXRjaC52YWx1ZS5zdGl0Y2ggJiYgcGFyZW50ICYmIGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtBcnJheTxSb290Q29udGVudD59ICovXG4gICAgICAgIGNvbnN0IHNpYmxpbmdzID0gcGFyZW50LmNoaWxkcmVuXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGFzc3VtZSB0aGUgc3RpdGNoIGlzIGFsbG93ZWQuXG4gICAgICAgIHNpYmxpbmdzW2luZGV4XSA9IHN0aXRjaC52YWx1ZS5zdGl0Y2hcbiAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIFVucGFjayBpZiBwb3NzaWJsZSBhbmQgd2hlbiBub3QgZ2l2ZW4gYSBgcm9vdGAuXG4gIGlmIChcbiAgICByZXN1bHQudHlwZSA9PT0gJ3Jvb3QnICYmXG4gICAgcmVzdWx0LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgIHJlc3VsdC5jaGlsZHJlblswXS50eXBlID09PSB0cmVlLnR5cGVcbiAgKSB7XG4gICAgcmV0dXJuIHJlc3VsdC5jaGlsZHJlblswXVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbGwgbm9kZXNcbiAqXG4gKiBAcGFyYW0ge0FycmF5PFJvb3RDb250ZW50Pn0gbm9kZXNcbiAqICAgaGFzdCBjb250ZW50LlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gYWxsKG5vZGVzLCBzdGF0ZSkge1xuICBsZXQgaW5kZXggPSAtMVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIC0gaW52YWxpZCBub2Rlcywgc2VlIHJlaHlwZWpzL3JlaHlwZS1yYXcjNy4gKi9cbiAgaWYgKG5vZGVzKSB7XG4gICAgd2hpbGUgKCsraW5kZXggPCBub2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmhhbmRsZShub2Rlc1tpbmRleF0pXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgcm9vdC5cbiAqXG4gKiBAcGFyYW0ge1Jvb3R9IG5vZGVcbiAqICAgaGFzdCByb290IG5vZGUuXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiByb290KG5vZGUsIHN0YXRlKSB7XG4gIGFsbChub2RlLmNoaWxkcmVuLCBzdGF0ZSlcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqICAgaGFzdCBlbGVtZW50IG5vZGUuXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBlbGVtZW50KG5vZGUsIHN0YXRlKSB7XG4gIHN0YXJ0VGFnKG5vZGUsIHN0YXRlKVxuXG4gIGFsbChub2RlLmNoaWxkcmVuLCBzdGF0ZSlcblxuICBlbmRUYWcobm9kZSwgc3RhdGUpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgdGV4dC5cbiAqXG4gKiBAcGFyYW0ge1RleHR9IG5vZGVcbiAqICAgaGFzdCB0ZXh0IG5vZGUuXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiB0ZXh0KG5vZGUsIHN0YXRlKSB7XG4gIC8vIEFsbG93IGBEQVRBYCB0aHJvdWdoIGBQTEFJTlRFWFRgLFxuICAvLyBidXQgd2hlbiBoYW5naW5nIGluIGEgdGFnIGZvciBleGFtcGxlLFxuICAvLyBzd2l0Y2ggYmFjayB0byBgREFUQWAuXG4gIC8vIE5vdGU6IGBTdGF0ZWAgaXMgbm90IGV4cG9zZWQgYnkgYHBhcnNlNWAsIHNvIHRoZXNlIG51bWJlcnMgYXJlIGZyYWdpbGUuXG4gIC8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9pbmlrdWxpbi9wYXJzZTUvYmxvYi80NmNiYTQzL3BhY2thZ2VzL3BhcnNlNS9saWIvdG9rZW5pemVyL2luZGV4LnRzI0w1OD5cbiAgaWYgKHN0YXRlLnBhcnNlci50b2tlbml6ZXIuc3RhdGUgPiA0KSB7XG4gICAgc3RhdGUucGFyc2VyLnRva2VuaXplci5zdGF0ZSA9IDBcbiAgfVxuXG4gIC8qKiBAdHlwZSB7Q2hhcmFjdGVyVG9rZW59ICovXG4gIGNvbnN0IHRva2VuID0ge1xuICAgIHR5cGU6IFRva2VuLlRva2VuVHlwZS5DSEFSQUNURVIsXG4gICAgY2hhcnM6IG5vZGUudmFsdWUsXG4gICAgbG9jYXRpb246IGNyZWF0ZVBhcnNlNUxvY2F0aW9uKG5vZGUpXG4gIH1cblxuICByZXNldFRva2VuaXplcihzdGF0ZSwgcG9pbnRTdGFydChub2RlKSlcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIHN0YXRlLnBhcnNlci5jdXJyZW50VG9rZW4gPSB0b2tlblxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLl9wcm9jZXNzVG9rZW4oc3RhdGUucGFyc2VyLmN1cnJlbnRUb2tlbilcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBkb2N0eXBlLlxuICpcbiAqIEBwYXJhbSB7RG9jdHlwZX0gbm9kZVxuICogICBoYXN0IGRvY3R5cGUgbm9kZS5cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZCBhYm91dCB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIGRvY3R5cGUobm9kZSwgc3RhdGUpIHtcbiAgLyoqIEB0eXBlIHtEb2N0eXBlVG9rZW59ICovXG4gIGNvbnN0IHRva2VuID0ge1xuICAgIHR5cGU6IFRva2VuLlRva2VuVHlwZS5ET0NUWVBFLFxuICAgIG5hbWU6ICdodG1sJyxcbiAgICBmb3JjZVF1aXJrczogZmFsc2UsXG4gICAgcHVibGljSWQ6ICcnLFxuICAgIHN5c3RlbUlkOiAnJyxcbiAgICBsb2NhdGlvbjogY3JlYXRlUGFyc2U1TG9jYXRpb24obm9kZSlcbiAgfVxuXG4gIHJlc2V0VG9rZW5pemVyKHN0YXRlLCBwb2ludFN0YXJ0KG5vZGUpKVxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLmN1cnJlbnRUb2tlbiA9IHRva2VuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIuX3Byb2Nlc3NUb2tlbihzdGF0ZS5wYXJzZXIuY3VycmVudFRva2VuKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHN0aXRjaC5cbiAqXG4gKiBAcGFyYW0ge05vZGVzfSBub2RlXG4gKiAgIHVua25vd24gbm9kZS5cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZCBhYm91dCB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIHN0aXRjaChub2RlLCBzdGF0ZSkge1xuICAvLyBNYXJrIHRoYXQgdGhlcmUgYXJlIHN0aXRjaGVzLCBzbyB3ZSBuZWVkIHRvIHdhbGsgdGhlIHRyZWUgYW5kIHJldmVydCB0aGVtLlxuICBzdGF0ZS5zdGl0Y2hlcyA9IHRydWVcblxuICAvKiogQHR5cGUge05vZGVzfSAqL1xuICBjb25zdCBjbG9uZSA9IGNsb25lV2l0aG91dENoaWxkcmVuKG5vZGUpXG5cbiAgLy8gUmVjdXJzZSwgYmVjYXVzZSB0byBzb21ld2hhdCBoYW5kbGUgYFs8eD5dPC94PmAgKHdoZXJlIGBbXWAgZGVub3RlcyB0aGVcbiAgLy8gcGFzc2VkIHRocm91Z2ggbm9kZSkuXG4gIGlmICgnY2hpbGRyZW4nIGluIG5vZGUgJiYgJ2NoaWxkcmVuJyBpbiBjbG9uZSkge1xuICAgIC8vIFJvb3QgaW4gcm9vdCBvdXQuXG4gICAgY29uc3QgZmFrZVJvb3QgPSAvKiogQHR5cGUge1Jvb3R9ICovIChcbiAgICAgIHJhdyh7dHlwZTogJ3Jvb3QnLCBjaGlsZHJlbjogbm9kZS5jaGlsZHJlbn0sIHN0YXRlLm9wdGlvbnMpXG4gICAgKVxuICAgIGNsb25lLmNoaWxkcmVuID0gZmFrZVJvb3QuY2hpbGRyZW5cbiAgfVxuXG4gIC8vIEhhY2s6IGB2YWx1ZWAgaXMgc3VwcG9zZWQgdG8gYmUgYSBzdHJpbmcsIGJ1dCBhcyBub25lIG9mIHRoZSB0b29sc1xuICAvLyAoYHBhcnNlNWAgb3IgYGhhc3QtdXRpbC1mcm9tLXBhcnNlNWApIGxvb2tzIGF0IGl0LCB3ZSBjYW4gcGFzcyBub2Rlc1xuICAvLyB0aHJvdWdoLlxuICBjb21tZW50KHt0eXBlOiAnY29tbWVudCcsIHZhbHVlOiB7c3RpdGNoOiBjbG9uZX19LCBzdGF0ZSlcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBjb21tZW50IChvciBzdGl0Y2gpLlxuICpcbiAqIEBwYXJhbSB7Q29tbWVudCB8IFN0aXRjaH0gbm9kZVxuICogICBoYXN0IGNvbW1lbnQgbm9kZS5cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZCBhYm91dCB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbW1lbnQobm9kZSwgc3RhdGUpIHtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHdlIHBhc3Mgc3RpdGNoZXMgdGhyb3VnaC5cbiAgY29uc3QgZGF0YSA9IG5vZGUudmFsdWVcblxuICAvKiogQHR5cGUge0NvbW1lbnRUb2tlbn0gKi9cbiAgY29uc3QgdG9rZW4gPSB7XG4gICAgdHlwZTogVG9rZW4uVG9rZW5UeXBlLkNPTU1FTlQsXG4gICAgZGF0YSxcbiAgICBsb2NhdGlvbjogY3JlYXRlUGFyc2U1TG9jYXRpb24obm9kZSlcbiAgfVxuICByZXNldFRva2VuaXplcihzdGF0ZSwgcG9pbnRTdGFydChub2RlKSlcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIHN0YXRlLnBhcnNlci5jdXJyZW50VG9rZW4gPSB0b2tlblxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLl9wcm9jZXNzVG9rZW4oc3RhdGUucGFyc2VyLmN1cnJlbnRUb2tlbilcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSByYXcgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge1Jhd30gbm9kZVxuICogICBoYXN0IHJhdyBub2RlLlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUmF3KG5vZGUsIHN0YXRlKSB7XG4gIC8vIFJlc2V0IHByZXByb2Nlc3NvcjpcbiAgLy8gU2VlOiA8aHR0cHM6Ly9naXRodWIuY29tL2luaWt1bGluL3BhcnNlNS9ibG9iLzZmN2NhNjAvcGFja2FnZXMvcGFyc2U1L2xpYi90b2tlbml6ZXIvcHJlcHJvY2Vzc29yLnRzI0wxOC1MMzE+LlxuICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLnByZXByb2Nlc3Nvci5odG1sID0gJydcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIHN0YXRlLnBhcnNlci50b2tlbml6ZXIucHJlcHJvY2Vzc29yLnBvcyA9IC0xXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLnByZXByb2Nlc3Nvci5sYXN0R2FwUG9zID0gLTJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIHN0YXRlLnBhcnNlci50b2tlbml6ZXIucHJlcHJvY2Vzc29yLmdhcFN0YWNrID0gW11cbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIHN0YXRlLnBhcnNlci50b2tlbml6ZXIucHJlcHJvY2Vzc29yLnNraXBOZXh0TmV3TGluZSA9IGZhbHNlXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLnByZXByb2Nlc3Nvci5sYXN0Q2h1bmtXcml0dGVuID0gZmFsc2VcbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci5wcmVwcm9jZXNzb3IuZW5kT2ZDaHVua0hpdCA9IGZhbHNlXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLnByZXByb2Nlc3Nvci5pc0VvbCA9IGZhbHNlXG5cbiAgLy8gTm93IHBhc3MgYG5vZGUudmFsdWVgLlxuICBzZXRQb2ludChzdGF0ZSwgcG9pbnRTdGFydChub2RlKSlcbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci53cml0ZShub2RlLnZhbHVlLCBmYWxzZSlcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIHN0YXRlLnBhcnNlci50b2tlbml6ZXIuX3J1blBhcnNpbmdMb29wKClcblxuICAvLyBDaGFyYWN0ZXIgcmVmZXJlbmNlcyBoYW5nLCBzbyBpZiB3ZSBlbmRlZCB0aGVyZSwgd2UgbmVlZCB0byBmbHVzaFxuICAvLyB0aG9zZSB0b28uXG4gIC8vIFdlIHJlc2V0IHRoZSBwcmVwcm9jZXNzb3IgYXMgaWYgdGhlIGRvY3VtZW50IGVuZHMgaGVyZS5cbiAgLy8gVGhlbiBvbmUgc2luZ2xlIGNhbGwgdG8gdGhlIHJlbGV2YW50IHN0YXRlIGRvZXMgdGhlIHRyaWNrLCBwYXJzZTVcbiAgLy8gY29uc3VtZXMgdGhlIHdob2xlIHRva2VuLlxuXG4gIC8vIE5vdGU6IGBTdGF0ZWAgaXMgbm90IGV4cG9zZWQgYnkgYHBhcnNlNWAsIHNvIHRoZXNlIG51bWJlcnMgYXJlIGZyYWdpbGUuXG4gIC8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9pbmlrdWxpbi9wYXJzZTUvYmxvYi80NmNiYTQzL3BhY2thZ2VzL3BhcnNlNS9saWIvdG9rZW5pemVyL2luZGV4LnRzI0w1OD5cbiAgLy8gTm90ZTogYSBjaGFuZ2UgdG8gYHBhcnNlNWAsIHdoaWNoIGJyZWFrcyB0aGlzLCB3YXMgbWVyZ2VkIGJ1dCBub3QgcmVsZWFzZWQuXG4gIC8vIEludmVzdGlnYXRlIHdoZW4gaXQgaXMuXG4gIGlmIChcbiAgICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLnN0YXRlID09PSA3MiAvKiBOQU1FRF9DSEFSQUNURVJfUkVGRVJFTkNFICovIHx8XG4gICAgc3RhdGUucGFyc2VyLnRva2VuaXplci5zdGF0ZSA9PT0gNzggLyogTlVNRVJJQ19DSEFSQUNURVJfUkVGRVJFTkNFX0VORCAqL1xuICApIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAgIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICAgIHN0YXRlLnBhcnNlci50b2tlbml6ZXIucHJlcHJvY2Vzc29yLmxhc3RDaHVua1dyaXR0ZW4gPSB0cnVlXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgICBjb25zdCBjcCA9IHN0YXRlLnBhcnNlci50b2tlbml6ZXIuX2NvbnN1bWUoKVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gICAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gICAgc3RhdGUucGFyc2VyLnRva2VuaXplci5fY2FsbFN0YXRlKGNwKVxuICB9XG59XG5cbi8qKlxuICogQ3Jhc2ggb24gYW4gdW5rbm93biBub2RlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gbm9kZV9cbiAqICAgdW5rbm93biBub2RlLlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTmV2ZXIuXG4gKi9cbmZ1bmN0aW9uIHVua25vd24obm9kZV8sIHN0YXRlKSB7XG4gIGNvbnN0IG5vZGUgPSAvKiogQHR5cGUge05vZGVzfSAqLyAobm9kZV8pXG5cbiAgaWYgKFxuICAgIHN0YXRlLm9wdGlvbnMucGFzc1Rocm91Z2ggJiZcbiAgICBzdGF0ZS5vcHRpb25zLnBhc3NUaHJvdWdoLmluY2x1ZGVzKG5vZGUudHlwZSlcbiAgKSB7XG4gICAgc3RpdGNoKG5vZGUsIHN0YXRlKVxuICB9IGVsc2Uge1xuICAgIGxldCBleHRyYSA9ICcnXG5cbiAgICBpZiAoa25vd25NZHhOYW1lcy5oYXMobm9kZS50eXBlKSkge1xuICAgICAgZXh0cmEgPVxuICAgICAgICBcIi4gSXQgbG9va3MgbGlrZSB5b3UgYXJlIHVzaW5nIE1EWCBub2RlcyB3aXRoIGBoYXN0LXV0aWwtcmF3YCAob3IgYHJlaHlwZS1yYXdgKS4gSWYgeW91IHVzZSB0aGlzIGJlY2F1c2UgeW91IGFyZSB1c2luZyByZW1hcmsgb3IgcmVoeXBlIHBsdWdpbnMgdGhhdCBpbmplY3QgYCdodG1sJ2Agbm9kZXMsIHRoZW4gcGxlYXNlIHJhaXNlIGFuIGlzc3VlIHdpdGggdGhhdCBwbHVnaW4sIGFzIGl0cyBhIGJhZCBhbmQgc2xvdyBpZGVhLiBJZiB5b3UgdXNlIHRoaXMgYmVjYXVzZSB5b3UgYXJlIHVzaW5nIG1hcmtkb3duIHN5bnRheCwgdGhlbiB5b3UgaGF2ZSB0byBjb25maWd1cmUgdGhpcyB1dGlsaXR5IChvciBwbHVnaW4pIHRvIHBhc3MgdGhyb3VnaCB0aGVzZSBub2RlcyAoc2VlIGBwYXNzVGhyb3VnaGAgaW4gZG9jcyksIGJ1dCB5b3UgY2FuIGFsc28gbWlncmF0ZSB0byB1c2UgdGhlIE1EWCBzeW50YXhcIlxuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNvbXBpbGUgYCcgKyBub2RlLnR5cGUgKyAnYCBub2RlJyArIGV4dHJhKVxuICB9XG59XG5cbi8qKlxuICogUmVzZXQgdGhlIHRva2VuaXplciBvZiBhIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0ge1BvaW50IHwgdW5kZWZpbmVkfSBwb2ludFxuICogICBQb2ludC5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0VG9rZW5pemVyKHN0YXRlLCBwb2ludCkge1xuICBzZXRQb2ludChzdGF0ZSwgcG9pbnQpXG5cbiAgLy8gUHJvY2VzcyBmaW5hbCBjaGFyYWN0ZXJzIGlmIHRoZXnigJlyZSBzdGlsbCB0aGVyZSBhZnRlciBoaWJlcm5hdGluZy5cbiAgLyoqIEB0eXBlIHtDaGFyYWN0ZXJUb2tlbn0gKi9cbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIGNvbnN0IHRva2VuID0gc3RhdGUucGFyc2VyLnRva2VuaXplci5jdXJyZW50Q2hhcmFjdGVyVG9rZW5cblxuICBpZiAodG9rZW4gJiYgdG9rZW4ubG9jYXRpb24pIHtcbiAgICB0b2tlbi5sb2NhdGlvbi5lbmRMaW5lID0gc3RhdGUucGFyc2VyLnRva2VuaXplci5wcmVwcm9jZXNzb3IubGluZVxuICAgIHRva2VuLmxvY2F0aW9uLmVuZENvbCA9IHN0YXRlLnBhcnNlci50b2tlbml6ZXIucHJlcHJvY2Vzc29yLmNvbCArIDFcbiAgICB0b2tlbi5sb2NhdGlvbi5lbmRPZmZzZXQgPSBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLnByZXByb2Nlc3Nvci5vZmZzZXQgKyAxXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgICBzdGF0ZS5wYXJzZXIuY3VycmVudFRva2VuID0gdG9rZW5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAgIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICAgIHN0YXRlLnBhcnNlci5fcHJvY2Vzc1Rva2VuKHN0YXRlLnBhcnNlci5jdXJyZW50VG9rZW4pXG4gIH1cblxuICAvLyBSZXNldCB0b2tlbml6ZXI6XG4gIC8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9pbmlrdWxpbi9wYXJzZTUvYmxvYi82ZjdjYTYwL3BhY2thZ2VzL3BhcnNlNS9saWIvdG9rZW5pemVyL2luZGV4LnRzI0wxODctTDIyMz4uXG4gIC8vIEVzcGVjaWFsbHkgcHV0dGluZyBpdCBiYWNrIGluIHRoZSBgZGF0YWAgc3RhdGUgaXMgdXNlZnVsOiBzb21lIGVsZW1lbnRzLFxuICAvLyBsaWtlIHRleHRhcmVhcyBhbmQgaWZyYW1lcywgY2hhbmdlIHRoZSBzdGF0ZS5cbiAgLy8gU2VlIEdILTcuXG4gIC8vIEJ1dCBhbHNvIGlmIGJyb2tlbiBIVE1MIGlzIGluIGByYXdgLCBhbmQgdGhlbiBhIGNvcnJlY3QgZWxlbWVudCBpcyBnaXZlbi5cbiAgLy8gU2VlIEdILTExLlxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci5wYXVzZWQgPSBmYWxzZVxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci5pbkxvb3AgPSBmYWxzZVxuXG4gIC8vIE5vdGU6IGRvbuKAmXQgcmVzZXQgYHN0YXRlYCwgYGluRm9yZWlnbk5vZGVgLCBvciBgbGFzdFN0YXJ0VGFnTmFtZWAsIHdlXG4gIC8vIG1hbnVhbGx5IHVwZGF0ZSB0aG9zZSB3aGVuIG5lZWRlZC5cbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci5hY3RpdmUgPSBmYWxzZVxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci5yZXR1cm5TdGF0ZSA9IFRva2VuaXplck1vZGUuREFUQVxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci5jaGFyUmVmQ29kZSA9IC0xXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLmNvbnN1bWVkQWZ0ZXJTbmFwc2hvdCA9IC0xXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLmN1cnJlbnRMb2NhdGlvbiA9IG51bGxcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIHN0YXRlLnBhcnNlci50b2tlbml6ZXIuY3VycmVudENoYXJhY3RlclRva2VuID0gbnVsbFxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci5jdXJyZW50VG9rZW4gPSBudWxsXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLmN1cnJlbnRBdHRyID0ge25hbWU6ICcnLCB2YWx1ZTogJyd9XG59XG5cbi8qKlxuICogU2V0IGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHtQb2ludCB8IHVuZGVmaW5lZH0gcG9pbnRcbiAqICAgUG9pbnQuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBzZXRQb2ludChzdGF0ZSwgcG9pbnQpIHtcbiAgaWYgKHBvaW50ICYmIHBvaW50Lm9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLyoqIEB0eXBlIHtMb2NhdGlvbn0gKi9cbiAgICBjb25zdCBsb2NhdGlvbiA9IHtcbiAgICAgIHN0YXJ0TGluZTogcG9pbnQubGluZSxcbiAgICAgIHN0YXJ0Q29sOiBwb2ludC5jb2x1bW4sXG4gICAgICBzdGFydE9mZnNldDogcG9pbnQub2Zmc2V0LFxuICAgICAgZW5kTGluZTogLTEsXG4gICAgICBlbmRDb2w6IC0xLFxuICAgICAgZW5kT2Zmc2V0OiAtMVxuICAgIH1cblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gICAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gICAgc3RhdGUucGFyc2VyLnRva2VuaXplci5wcmVwcm9jZXNzb3IubGluZVN0YXJ0UG9zID0gLXBvaW50LmNvbHVtbiArIDEgLy8gTG9va3Mgd2VpcmQsIGJ1dCBlbnN1cmVzIHdlIGdldCBjb3JyZWN0IHBvc2l0aW9uYWwgaW5mby5cbiAgICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLnByZXByb2Nlc3Nvci5kcm9wcGVkQnVmZmVyU2l6ZSA9IHBvaW50Lm9mZnNldFxuICAgIHN0YXRlLnBhcnNlci50b2tlbml6ZXIucHJlcHJvY2Vzc29yLmxpbmUgPSBwb2ludC5saW5lXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogcHJpdmF0ZS5cbiAgICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgICBzdGF0ZS5wYXJzZXIudG9rZW5pemVyLmN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uXG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0IGEgc3RhcnQgdGFnLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRUYWcobm9kZSwgc3RhdGUpIHtcbiAgY29uc3QgdGFnTmFtZSA9IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgLy8gSWdub3JlIHRhZ3MgaWYgd2XigJlyZSBpbiBwbGFpbiB0ZXh0LlxuICBpZiAoc3RhdGUucGFyc2VyLnRva2VuaXplci5zdGF0ZSA9PT0gVG9rZW5pemVyTW9kZS5QTEFJTlRFWFQpIHJldHVyblxuXG4gIHJlc2V0VG9rZW5pemVyKHN0YXRlLCBwb2ludFN0YXJ0KG5vZGUpKVxuXG4gIGNvbnN0IGN1cnJlbnQgPSBzdGF0ZS5wYXJzZXIub3BlbkVsZW1lbnRzLmN1cnJlbnRcbiAgbGV0IG5zID0gJ25hbWVzcGFjZVVSSScgaW4gY3VycmVudCA/IGN1cnJlbnQubmFtZXNwYWNlVVJJIDogd2ViTmFtZXNwYWNlcy5odG1sXG5cbiAgaWYgKG5zID09PSB3ZWJOYW1lc3BhY2VzLmh0bWwgJiYgdGFnTmFtZSA9PT0gJ3N2ZycpIHtcbiAgICBucyA9IHdlYk5hbWVzcGFjZXMuc3ZnXG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB0b1BhcnNlNShcbiAgICAvLyBTaGFsbG93IGNsb25lIHRvIG5vdCBkZWx2ZSBpbnRvIGBjaGlsZHJlbmA6IHdlIG9ubHkgbmVlZCB0aGUgYXR0cmlidXRlcy5cbiAgICB7Li4ubm9kZSwgY2hpbGRyZW46IFtdfSxcbiAgICB7c3BhY2U6IG5zID09PSB3ZWJOYW1lc3BhY2VzLnN2ZyA/ICdzdmcnIDogJ2h0bWwnfVxuICApXG5cbiAgLyoqIEB0eXBlIHtUYWdUb2tlbn0gKi9cbiAgY29uc3QgdGFnID0ge1xuICAgIHR5cGU6IFRva2VuLlRva2VuVHlwZS5TVEFSVF9UQUcsXG4gICAgdGFnTmFtZSxcbiAgICB0YWdJRDogaHRtbC5nZXRUYWdJRCh0YWdOYW1lKSxcbiAgICAvLyBXZSBhbHdheXMgc2VuZCBzdGFydCBhbmQgZW5kIHRhZ3MuXG4gICAgc2VsZkNsb3Npbmc6IGZhbHNlLFxuICAgIGFja1NlbGZDbG9zaW5nOiBmYWxzZSxcbiAgICAvLyBBbHdheXMgZWxlbWVudC5cbiAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgIGF0dHJzOiAnYXR0cnMnIGluIHJlc3VsdCA/IHJlc3VsdC5hdHRycyA6IFtdLFxuICAgIGxvY2F0aW9uOiBjcmVhdGVQYXJzZTVMb2NhdGlvbihub2RlKVxuICB9XG5cbiAgLy8gVGhlIEhUTUwgcGFyc2luZyBhbGdvcml0aG0gd29ya3MgYnkgZG9pbmcgaGFsZiBvZiB0aGUgc3RhdGUgbWFuYWdlbWVudCBpblxuICAvLyB0aGUgdG9rZW5pemVyIGFuZCBoYWxmIGluIHRoZSBwYXJzZXIuXG4gIC8vIFdlIGNhbuKAmXQgdXNlIHRoZSB0b2tlbml6ZXIgaGVyZSwgYXMgd2UgZG9u4oCZdCBoYXZlIHN0cmluZ3MuXG4gIC8vIFNvIHdlIGFjdCAqYXMgaWYqIHRoZSB0b2tlbml6ZXIgZW1pdHMgdG9rZW5zOlxuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIuY3VycmVudFRva2VuID0gdGFnXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByaXZhdGUuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBzdGF0ZS5wYXJzZXIuX3Byb2Nlc3NUb2tlbihzdGF0ZS5wYXJzZXIuY3VycmVudFRva2VuKVxuXG4gIC8vIOKApmJ1dCB0aGVuIHdlIHN0aWxsIG5lZWQgYSBidW5jaCBvZiB3b3JrIHRoYXQgdGhlIHRva2VuaXplciB3b3VsZCBub3JtYWxseVxuICAvLyBkbywgc3VjaCBhczpcblxuICAvLyBTZXQgYSB0YWcgbmFtZSwgc2ltaWxhciB0byBob3cgdGhlIHRva2VuaXplciB3b3VsZCBkbyBpdC5cbiAgc3RhdGUucGFyc2VyLnRva2VuaXplci5sYXN0U3RhcnRUYWdOYW1lID0gdGFnTmFtZVxuXG4gIC8vIGBpbkZvcmVpZ25Ob2RlYCBpcyBjb3JyZWN0bHkgc2V0IGJ5IHRoZSBwYXJzZXIuXG59XG5cbi8qKlxuICogRW1pdCBhbiBlbmQgdGFnLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gZW5kVGFnKG5vZGUsIHN0YXRlKSB7XG4gIGNvbnN0IHRhZ05hbWUgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAvLyBEbyBub3QgZW1pdCBjbG9zaW5nIHRhZ3MgZm9yIEhUTUwgdm9pZCBlbGVtZW50cy5cbiAgaWYgKFxuICAgICFzdGF0ZS5wYXJzZXIudG9rZW5pemVyLmluRm9yZWlnbk5vZGUgJiZcbiAgICBodG1sVm9pZEVsZW1lbnRzLmluY2x1ZGVzKHRhZ05hbWUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gSWdub3JlIHRhZ3MgaWYgd2XigJlyZSBpbiBwbGFpbiB0ZXh0LlxuICBpZiAoc3RhdGUucGFyc2VyLnRva2VuaXplci5zdGF0ZSA9PT0gVG9rZW5pemVyTW9kZS5QTEFJTlRFWFQpIHJldHVyblxuXG4gIHJlc2V0VG9rZW5pemVyKHN0YXRlLCBwb2ludEVuZChub2RlKSlcblxuICAvKiogQHR5cGUge1RhZ1Rva2VufSAqL1xuICBjb25zdCB0YWcgPSB7XG4gICAgdHlwZTogVG9rZW4uVG9rZW5UeXBlLkVORF9UQUcsXG4gICAgdGFnTmFtZSxcbiAgICB0YWdJRDogaHRtbC5nZXRUYWdJRCh0YWdOYW1lKSxcbiAgICBzZWxmQ2xvc2luZzogZmFsc2UsXG4gICAgYWNrU2VsZkNsb3Npbmc6IGZhbHNlLFxuICAgIGF0dHJzOiBbXSxcbiAgICBsb2NhdGlvbjogY3JlYXRlUGFyc2U1TG9jYXRpb24obm9kZSlcbiAgfVxuXG4gIC8vIFRoZSBIVE1MIHBhcnNpbmcgYWxnb3JpdGhtIHdvcmtzIGJ5IGRvaW5nIGhhbGYgb2YgdGhlIHN0YXRlIG1hbmFnZW1lbnQgaW5cbiAgLy8gdGhlIHRva2VuaXplciBhbmQgaGFsZiBpbiB0aGUgcGFyc2VyLlxuICAvLyBXZSBjYW7igJl0IHVzZSB0aGUgdG9rZW5pemVyIGhlcmUsIGFzIHdlIGRvbuKAmXQgaGF2ZSBzdHJpbmdzLlxuICAvLyBTbyB3ZSBhY3QgKmFzIGlmKiB0aGUgdG9rZW5pemVyIGVtaXRzIHRva2VuczpcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLmN1cnJlbnRUb2tlbiA9IHRhZ1xuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBwcml2YXRlLlxuICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgc3RhdGUucGFyc2VyLl9wcm9jZXNzVG9rZW4oc3RhdGUucGFyc2VyLmN1cnJlbnRUb2tlbilcblxuICAvLyDigKZidXQgdGhlbiB3ZSBzdGlsbCBuZWVkIGEgYnVuY2ggb2Ygd29yayB0aGF0IHRoZSB0b2tlbml6ZXIgd291bGQgbm9ybWFsbHlcbiAgLy8gZG8sIHN1Y2ggYXM6XG5cbiAgLy8gU3dpdGNoIGJhY2sgdG8gdGhlIGRhdGEgc3RhdGUgYWZ0ZXIgYWx0ZXJuYXRpdmUgc3RhdGVzIHRoYXQgZG9u4oCZdCBhY2NlcHRcbiAgLy8gdGFnczpcbiAgaWYgKFxuICAgIC8vIEN1cnJlbnQgZWxlbWVudCBpcyBjbG9zZWQuXG4gICAgdGFnTmFtZSA9PT0gc3RhdGUucGFyc2VyLnRva2VuaXplci5sYXN0U3RhcnRUYWdOYW1lICYmXG4gICAgLy8gYDx0ZXh0YXJlYT5gIGFuZCBgPHRpdGxlPmBcbiAgICAoc3RhdGUucGFyc2VyLnRva2VuaXplci5zdGF0ZSA9PT0gVG9rZW5pemVyTW9kZS5SQ0RBVEEgfHxcbiAgICAgIC8vIGA8aWZyYW1lPmAsIGA8bm9lbWJlZD5gLCBgPHN0eWxlPmAsIGA8eG1wPmBcbiAgICAgIHN0YXRlLnBhcnNlci50b2tlbml6ZXIuc3RhdGUgPT09IFRva2VuaXplck1vZGUuUkFXVEVYVCB8fFxuICAgICAgLy8gYDxzY3JpcHQ+YFxuICAgICAgc3RhdGUucGFyc2VyLnRva2VuaXplci5zdGF0ZSA9PT0gVG9rZW5pemVyTW9kZS5TQ1JJUFRfREFUQSlcbiAgKSB7XG4gICAgc3RhdGUucGFyc2VyLnRva2VuaXplci5zdGF0ZSA9IFRva2VuaXplck1vZGUuREFUQVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYG5vZGVgIHJlcHJlc2VudHMgYSB3aG9sZSBkb2N1bWVudCBvciBhIGZyYWdtZW50LlxuICpcbiAqIEBwYXJhbSB7Tm9kZXN9IG5vZGVcbiAqICAgaGFzdCBub2RlLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhpcyByZXByZXNlbnRzIGEgd2hvbGUgZG9jdW1lbnQgb3IgYSBmcmFnbWVudC5cbiAqL1xuZnVuY3Rpb24gZG9jdW1lbnRNb2RlKG5vZGUpIHtcbiAgY29uc3QgaGVhZCA9IG5vZGUudHlwZSA9PT0gJ3Jvb3QnID8gbm9kZS5jaGlsZHJlblswXSA6IG5vZGVcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgaGVhZCAmJlxuICAgICAgKGhlYWQudHlwZSA9PT0gJ2RvY3R5cGUnIHx8XG4gICAgICAgIChoZWFkLnR5cGUgPT09ICdlbGVtZW50JyAmJiBoZWFkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2h0bWwnKSlcbiAgKVxufVxuXG4vKipcbiAqIEdldCBhIGBwYXJzZTVgIGxvY2F0aW9uIGZyb20gYSBub2RlLlxuICpcbiAqIEBwYXJhbSB7Tm9kZXMgfCBTdGl0Y2h9IG5vZGVcbiAqICAgaGFzdCBub2RlLlxuICogQHJldHVybnMge0xvY2F0aW9ufVxuICogICBgcGFyc2U1YCBsb2NhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGFyc2U1TG9jYXRpb24obm9kZSkge1xuICBjb25zdCBzdGFydCA9IHBvaW50U3RhcnQobm9kZSkgfHwge1xuICAgIGxpbmU6IHVuZGVmaW5lZCxcbiAgICBjb2x1bW46IHVuZGVmaW5lZCxcbiAgICBvZmZzZXQ6IHVuZGVmaW5lZFxuICB9XG4gIGNvbnN0IGVuZCA9IHBvaW50RW5kKG5vZGUpIHx8IHtcbiAgICBsaW5lOiB1bmRlZmluZWQsXG4gICAgY29sdW1uOiB1bmRlZmluZWQsXG4gICAgb2Zmc2V0OiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKiBAdHlwZSB7UmVjb3JkPGtleW9mIExvY2F0aW9uLCBudW1iZXIgfCB1bmRlZmluZWQ+fSAqL1xuICBjb25zdCBsb2NhdGlvbiA9IHtcbiAgICBzdGFydExpbmU6IHN0YXJ0LmxpbmUsXG4gICAgc3RhcnRDb2w6IHN0YXJ0LmNvbHVtbixcbiAgICBzdGFydE9mZnNldDogc3RhcnQub2Zmc2V0LFxuICAgIGVuZExpbmU6IGVuZC5saW5lLFxuICAgIGVuZENvbDogZW5kLmNvbHVtbixcbiAgICBlbmRPZmZzZXQ6IGVuZC5vZmZzZXRcbiAgfVxuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IHVuaXN0IHBvaW50IHZhbHVlcyBjYW4gYmUgYHVuZGVmaW5lZGAgaW4gaGFzdCwgd2hpY2hcbiAgLy8gYHBhcnNlNWAgdHlwZXMgZG9u4oCZdCB3YW50LlxuICByZXR1cm4gbG9jYXRpb25cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge05vZGVzfSBOb2RlVHlwZVxuICogICBOb2RlIHR5cGUuXG4gKiBAcGFyYW0ge05vZGVUeXBlfSBub2RlXG4gKiAgIE5vZGUgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7Tm9kZVR5cGV9XG4gKiAgIENsb25lZCBub2RlLCB3aXRob3V0IGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBjbG9uZVdpdGhvdXRDaGlsZHJlbihub2RlKSB7XG4gIHJldHVybiAnY2hpbGRyZW4nIGluIG5vZGVcbiAgICA/IHN0cnVjdHVyZWRDbG9uZSh7Li4ubm9kZSwgY2hpbGRyZW46IFtdfSlcbiAgICA6IHN0cnVjdHVyZWRDbG9uZShub2RlKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hast-util-raw/lib/index.js\n");

/***/ })

};
;